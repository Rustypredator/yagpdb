// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigs)
	t.Run("TicketParticipants", testTicketParticipants)
	t.Run("Tickets", testTickets)
}

func TestDelete(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsDelete)
	t.Run("TicketParticipants", testTicketParticipantsDelete)
	t.Run("Tickets", testTicketsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsQueryDeleteAll)
	t.Run("TicketParticipants", testTicketParticipantsQueryDeleteAll)
	t.Run("Tickets", testTicketsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsSliceDeleteAll)
	t.Run("TicketParticipants", testTicketParticipantsSliceDeleteAll)
	t.Run("Tickets", testTicketsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsExists)
	t.Run("TicketParticipants", testTicketParticipantsExists)
	t.Run("Tickets", testTicketsExists)
}

func TestFind(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsFind)
	t.Run("TicketParticipants", testTicketParticipantsFind)
	t.Run("Tickets", testTicketsFind)
}

func TestBind(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsBind)
	t.Run("TicketParticipants", testTicketParticipantsBind)
	t.Run("Tickets", testTicketsBind)
}

func TestOne(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsOne)
	t.Run("TicketParticipants", testTicketParticipantsOne)
	t.Run("Tickets", testTicketsOne)
}

func TestAll(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsAll)
	t.Run("TicketParticipants", testTicketParticipantsAll)
	t.Run("Tickets", testTicketsAll)
}

func TestCount(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsCount)
	t.Run("TicketParticipants", testTicketParticipantsCount)
	t.Run("Tickets", testTicketsCount)
}

func TestInsert(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsInsert)
	t.Run("TicketConfigs", testTicketConfigsInsertWhitelist)
	t.Run("TicketParticipants", testTicketParticipantsInsert)
	t.Run("TicketParticipants", testTicketParticipantsInsertWhitelist)
	t.Run("Tickets", testTicketsInsert)
	t.Run("Tickets", testTicketsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsReload)
	t.Run("TicketParticipants", testTicketParticipantsReload)
	t.Run("Tickets", testTicketsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsReloadAll)
	t.Run("TicketParticipants", testTicketParticipantsReloadAll)
	t.Run("Tickets", testTicketsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsSelect)
	t.Run("TicketParticipants", testTicketParticipantsSelect)
	t.Run("Tickets", testTicketsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsUpdate)
	t.Run("TicketParticipants", testTicketParticipantsUpdate)
	t.Run("Tickets", testTicketsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("TicketConfigs", testTicketConfigsSliceUpdateAll)
	t.Run("TicketParticipants", testTicketParticipantsSliceUpdateAll)
	t.Run("Tickets", testTicketsSliceUpdateAll)
}

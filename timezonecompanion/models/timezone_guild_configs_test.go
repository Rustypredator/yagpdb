// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTimezoneGuildConfigs(t *testing.T) {
	t.Parallel()

	query := TimezoneGuildConfigs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTimezoneGuildConfigsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TimezoneGuildConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimezoneGuildConfigsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TimezoneGuildConfigs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TimezoneGuildConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimezoneGuildConfigsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TimezoneGuildConfigSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TimezoneGuildConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTimezoneGuildConfigsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TimezoneGuildConfigExists(ctx, tx, o.GuildID)
	if err != nil {
		t.Errorf("Unable to check if TimezoneGuildConfig exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TimezoneGuildConfigExists to return true, but got false.")
	}
}

func testTimezoneGuildConfigsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	timezoneGuildConfigFound, err := FindTimezoneGuildConfig(ctx, tx, o.GuildID)
	if err != nil {
		t.Error(err)
	}

	if timezoneGuildConfigFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTimezoneGuildConfigsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TimezoneGuildConfigs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTimezoneGuildConfigsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TimezoneGuildConfigs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTimezoneGuildConfigsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	timezoneGuildConfigOne := &TimezoneGuildConfig{}
	timezoneGuildConfigTwo := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, timezoneGuildConfigOne, timezoneGuildConfigDBTypes, false, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, timezoneGuildConfigTwo, timezoneGuildConfigDBTypes, false, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = timezoneGuildConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = timezoneGuildConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TimezoneGuildConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTimezoneGuildConfigsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	timezoneGuildConfigOne := &TimezoneGuildConfig{}
	timezoneGuildConfigTwo := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, timezoneGuildConfigOne, timezoneGuildConfigDBTypes, false, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}
	if err = randomize.Struct(seed, timezoneGuildConfigTwo, timezoneGuildConfigDBTypes, false, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = timezoneGuildConfigOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = timezoneGuildConfigTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TimezoneGuildConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testTimezoneGuildConfigsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TimezoneGuildConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTimezoneGuildConfigsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(timezoneGuildConfigColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TimezoneGuildConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTimezoneGuildConfigsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTimezoneGuildConfigsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TimezoneGuildConfigSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTimezoneGuildConfigsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TimezoneGuildConfigs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	timezoneGuildConfigDBTypes = map[string]string{`GuildID`: `bigint`, `DisabledInChannels`: `ARRAYbigint`, `EnabledInChannels`: `ARRAYbigint`, `NewChannelsDisabled`: `boolean`}
	_                          = bytes.MinRead
)

func testTimezoneGuildConfigsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(timezoneGuildConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(timezoneGuildConfigColumns) == len(timezoneGuildConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TimezoneGuildConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTimezoneGuildConfigsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(timezoneGuildConfigColumns) == len(timezoneGuildConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TimezoneGuildConfig{}
	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TimezoneGuildConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, timezoneGuildConfigDBTypes, true, timezoneGuildConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(timezoneGuildConfigColumns, timezoneGuildConfigPrimaryKeyColumns) {
		fields = timezoneGuildConfigColumns
	} else {
		fields = strmangle.SetComplement(
			timezoneGuildConfigColumns,
			timezoneGuildConfigPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TimezoneGuildConfigSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTimezoneGuildConfigsUpsert(t *testing.T) {
	t.Parallel()

	if len(timezoneGuildConfigColumns) == len(timezoneGuildConfigPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TimezoneGuildConfig{}
	if err = randomize.Struct(seed, &o, timezoneGuildConfigDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TimezoneGuildConfig: %s", err)
	}

	count, err := TimezoneGuildConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, timezoneGuildConfigDBTypes, false, timezoneGuildConfigPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TimezoneGuildConfig struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TimezoneGuildConfig: %s", err)
	}

	count, err = TimezoneGuildConfigs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

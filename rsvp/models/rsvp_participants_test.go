// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRSVPParticipants(t *testing.T) {
	t.Parallel()

	query := RSVPParticipants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRSVPParticipantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RSVPParticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRSVPParticipantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RSVPParticipants().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RSVPParticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRSVPParticipantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RSVPParticipantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RSVPParticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRSVPParticipantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RSVPParticipantExists(ctx, tx, o.RSVPSessionsMessageID, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if RSVPParticipant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RSVPParticipantExists to return true, but got false.")
	}
}

func testRSVPParticipantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rsvpParticipantFound, err := FindRSVPParticipant(ctx, tx, o.RSVPSessionsMessageID, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if rsvpParticipantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRSVPParticipantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RSVPParticipants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRSVPParticipantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RSVPParticipants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRSVPParticipantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rsvpParticipantOne := &RSVPParticipant{}
	rsvpParticipantTwo := &RSVPParticipant{}
	if err = randomize.Struct(seed, rsvpParticipantOne, rsvpParticipantDBTypes, false, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}
	if err = randomize.Struct(seed, rsvpParticipantTwo, rsvpParticipantDBTypes, false, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rsvpParticipantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rsvpParticipantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RSVPParticipants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRSVPParticipantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rsvpParticipantOne := &RSVPParticipant{}
	rsvpParticipantTwo := &RSVPParticipant{}
	if err = randomize.Struct(seed, rsvpParticipantOne, rsvpParticipantDBTypes, false, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}
	if err = randomize.Struct(seed, rsvpParticipantTwo, rsvpParticipantDBTypes, false, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rsvpParticipantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rsvpParticipantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RSVPParticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testRSVPParticipantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RSVPParticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRSVPParticipantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(rsvpParticipantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RSVPParticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRSVPParticipantToOneRSVPSessionUsingRSVPSessionsMessage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RSVPParticipant
	var foreign RSVPSession

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, rsvpParticipantDBTypes, false, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, rsvpSessionDBTypes, false, rsvpSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPSession struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RSVPSessionsMessageID = foreign.MessageID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RSVPSessionsMessage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.MessageID != foreign.MessageID {
		t.Errorf("want: %v, got %v", foreign.MessageID, check.MessageID)
	}

	slice := RSVPParticipantSlice{&local}
	if err = local.L.LoadRSVPSessionsMessage(ctx, tx, false, (*[]*RSVPParticipant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RSVPSessionsMessage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RSVPSessionsMessage = nil
	if err = local.L.LoadRSVPSessionsMessage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RSVPSessionsMessage == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRSVPParticipantToOneSetOpRSVPSessionUsingRSVPSessionsMessage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RSVPParticipant
	var b, c RSVPSession

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rsvpParticipantDBTypes, false, strmangle.SetComplement(rsvpParticipantPrimaryKeyColumns, rsvpParticipantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, rsvpSessionDBTypes, false, strmangle.SetComplement(rsvpSessionPrimaryKeyColumns, rsvpSessionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, rsvpSessionDBTypes, false, strmangle.SetComplement(rsvpSessionPrimaryKeyColumns, rsvpSessionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RSVPSession{&b, &c} {
		err = a.SetRSVPSessionsMessage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RSVPSessionsMessage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RSVPSessionsMessageRSVPParticipants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RSVPSessionsMessageID != x.MessageID {
			t.Error("foreign key was wrong value", a.RSVPSessionsMessageID)
		}

		if exists, err := RSVPParticipantExists(ctx, tx, a.RSVPSessionsMessageID, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testRSVPParticipantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRSVPParticipantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RSVPParticipantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRSVPParticipantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RSVPParticipants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rsvpParticipantDBTypes = map[string]string{`UserID`: `bigint`, `RSVPSessionsMessageID`: `bigint`, `GuildID`: `bigint`, `JoinState`: `smallint`, `ReminderEnabled`: `boolean`, `MarkedAsParticipatingAt`: `timestamp with time zone`}
	_                      = bytes.MinRead
)

func testRSVPParticipantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(rsvpParticipantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rsvpParticipantColumns) == len(rsvpParticipantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RSVPParticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRSVPParticipantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rsvpParticipantColumns) == len(rsvpParticipantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RSVPParticipant{}
	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RSVPParticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rsvpParticipantDBTypes, true, rsvpParticipantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rsvpParticipantColumns, rsvpParticipantPrimaryKeyColumns) {
		fields = rsvpParticipantColumns
	} else {
		fields = strmangle.SetComplement(
			rsvpParticipantColumns,
			rsvpParticipantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RSVPParticipantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRSVPParticipantsUpsert(t *testing.T) {
	t.Parallel()

	if len(rsvpParticipantColumns) == len(rsvpParticipantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RSVPParticipant{}
	if err = randomize.Struct(seed, &o, rsvpParticipantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RSVPParticipant: %s", err)
	}

	count, err := RSVPParticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, rsvpParticipantDBTypes, false, rsvpParticipantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RSVPParticipant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RSVPParticipant: %s", err)
	}

	count, err = RSVPParticipants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

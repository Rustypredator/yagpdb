// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipants)
	t.Run("RSVPSessions", testRSVPSessions)
}

func TestDelete(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsDelete)
	t.Run("RSVPSessions", testRSVPSessionsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsQueryDeleteAll)
	t.Run("RSVPSessions", testRSVPSessionsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsSliceDeleteAll)
	t.Run("RSVPSessions", testRSVPSessionsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsExists)
	t.Run("RSVPSessions", testRSVPSessionsExists)
}

func TestFind(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsFind)
	t.Run("RSVPSessions", testRSVPSessionsFind)
}

func TestBind(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsBind)
	t.Run("RSVPSessions", testRSVPSessionsBind)
}

func TestOne(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsOne)
	t.Run("RSVPSessions", testRSVPSessionsOne)
}

func TestAll(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsAll)
	t.Run("RSVPSessions", testRSVPSessionsAll)
}

func TestCount(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsCount)
	t.Run("RSVPSessions", testRSVPSessionsCount)
}

func TestInsert(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsInsert)
	t.Run("RSVPParticipants", testRSVPParticipantsInsertWhitelist)
	t.Run("RSVPSessions", testRSVPSessionsInsert)
	t.Run("RSVPSessions", testRSVPSessionsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("RSVPParticipantToRSVPSessionUsingRSVPSessionsMessage", testRSVPParticipantToOneRSVPSessionUsingRSVPSessionsMessage)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("RSVPSessionToRSVPSessionsMessageRSVPParticipants", testRSVPSessionToManyRSVPSessionsMessageRSVPParticipants)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("RSVPParticipantToRSVPSessionUsingRSVPSessionsMessageRSVPParticipants", testRSVPParticipantToOneSetOpRSVPSessionUsingRSVPSessionsMessage)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("RSVPSessionToRSVPSessionsMessageRSVPParticipants", testRSVPSessionToManyAddOpRSVPSessionsMessageRSVPParticipants)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsReload)
	t.Run("RSVPSessions", testRSVPSessionsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsReloadAll)
	t.Run("RSVPSessions", testRSVPSessionsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsSelect)
	t.Run("RSVPSessions", testRSVPSessionsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsUpdate)
	t.Run("RSVPSessions", testRSVPSessionsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("RSVPParticipants", testRSVPParticipantsSliceUpdateAll)
	t.Run("RSVPSessions", testRSVPSessionsSliceUpdateAll)
}
